server:
  port: 8081
  servlet:
    context-path: /user-service
    encoding:
      force: true
  shutdown: graceful
spring:
  application:
    name: user-service
  profiles:
    active: ${user-service.spring.profiles.active:dev}
  datasource:
    url: ${user-service.datasource.url}
    password: ${user-service.datasource.password}
    username: ${user-service.datasource.username}
    hikari:
      maximum-pool-size: ${user-service.datasource.hikari.maximum-pool-size}
  web:
    resources:
      add-mappings: false
  jpa:
    open-in-view: ${user-service.jpa.open-in-view}
    properties:
      hibernate:
        enable_lazy_load_no_trans: ${user-service.jpa.properties.hibernate.enable_lazy_load_no_trans}
    hibernate:
      ddl-auto: ${user-service.jpa.hibernate.ddl-auto}
    show-sql: ${user-service.jpa.show-sql}
  h2:
    console:
      enabled: ${user-service.h2.console.enabled}
      path: ${user-service.h2.console.path}
      settings:
        web-allow-others: ${user-service.h2.console.settings.web-allow-others}
  flyway:
    enabled: ${user-service.flyway.enabled}
    locations: classpath:db/migration
    baseline-on-migrate: true
    clean-on-validation-error: true
    out-of-order: true
  main:
    allow-bean-definition-overriding: true
  jackson:
    default-property-inclusion: non_null
  rabbitmq:
    host: ${user-service.rabbitmq.host}
    port: ${user-service.rabbitmq.port}
    username: ${user-service.rabbitmq.username}
    password: ${user-service.rabbitmq.password}
    transaction-service:
      queue: ${user-service.rabbitmq.transaction-service.queue}
      exchange: ${user-service.rabbitmq.transaction-service.exchange}
      created-routing-key: ${user-service.rabbitmq.transaction-service.created-routing-key}

  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: ${user-service.oidc.issuer-uri}
          jwk-set-uri: ${user-service.oidc.jwk-set-uri}
          client-id: ${user-service.oidc.client-id}
          token-uri: ${user-service.oidc.token-uri}

springdoc:
  swagger-ui:
    enabled: ${user-service.springdoc.swagger-ui.enabled}
    operations-sorter: method
    tags-sorter: alpha
    display-request-duration: true

openapi-servers-urls: ${user-service.openapi-servers-urls}

logging:
  pattern:
    console: "%red(%d{yyyy-MM-dd'T'HH:mm:ssXXX}) %magenta([%thread]) [${spring.application.name}, %X{traceId:-}, %X{spanId:-}] %highlight(%-5level) %logger{36}.%M - %msg%n"

api:
  transaction:
    host: ${user-service.api.transaction.host}